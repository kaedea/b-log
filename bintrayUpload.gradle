/*
 * Copyright (c) 2017. Kaede (kidhaibara@gmail.com) All Rights Reserved.
 */

// Load properties.
Properties pros = new Properties()

// Add Project's properties.
def iterator = properties.keySet().iterator()
while (iterator.hasNext()) {
    def key = iterator.next()
    def value = properties.get(key)
    if (value != null)
        pros.put(key, value)
}

// Add properties from files.
File[] files = [project.file("project.properties"), rootProject.file("local.properties")]
for (File item : files) {
    if (item.exists())
        pros.load(item.newDataInputStream())
}

// Core config.
if (!pros.getProperty("project.groupId")) throw new StopActionException("NO GROUPID SPECIFICED")
if (!pros.getProperty("project.version")) throw new StopActionException("NO VERSION SPECIFICED")
def projectGroupId = pros.getProperty("project.groupId")
def projectVersion = pros.getProperty("project.version")
def bintrayUser = pros.getProperty("bintray.user") ? pros.getProperty("bintray.user") : System.getenv('BT_USER')
def bintrayApiKey = pros.getProperty("bintray.apikey") ? pros.getProperty("bintray.apikey") : System.getenv('BT_KEY')
// if (!bintrayUser || !bintrayApiKey) throw new StopActionException("NO BINTRAY ACCOUNT SPECIFICED")

// Optional config.
def projectSiteUrl = pros.getProperty("project.siteUrl") ? pros.getProperty("project.siteUrl") : "NO WEBSITE"
def projectGitUrl = pros.getProperty("project.gitUrl") ? pros.getProperty("project.gitUrl") : "NO GIT URL"
def projectIssueUrl = pros.getProperty("project.issueUrl") ? pros.getProperty("project.issueUrl") : "NO ISSUE URL"
def projectDesc = pros.getProperty("project.description") ? pros.getProperty("project.description") : "NO DESCRIPTION"
// def javadocName = pros.getProperty("javadoc.name")

def bintrayRepo = pros.getProperty("bintary.repo") ? pros.getProperty("bintary.repo") : "maven"
def developerName = pros.getProperty("developer.name") ? pros.getProperty("developer.name") : "NO DEVELOPER"
def developerSite = pros.getProperty("developer.siteUrl") ? pros.getProperty("developer.siteUrl") : "NO DEVELOPER SITE"
def developerEmail = pros.getProperty("developer.email") ? pros.getProperty("developer.email") : "NO EMAIL"

group = projectGroupId
version = projectVersion

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

// BintrayUpload Task.
def hasAndroidPlugin() {
    return getPlugins().inject(false) { a, b ->
        def classStr = b.getClass().name
        def isAndroid = ("com.android.build.gradle.LibraryPlugin" == classStr) || ("com.android.build.gradle.AppPlugin" == classStr)
        a || isAndroid
    }
}

task sourcesJar(type: Jar) {
    if (hasAndroidPlugin()) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    } else {
        from sourceSets.main.allSource
        classifier = 'sources'
    }
}

artifacts {
    archives sourcesJar
    // archives javadocJar
}

bintray {
    user = bintrayUser
    key = bintrayApiKey
    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = "${project.name}"
        desc = projectDesc
        licenses = ['Apache-2.0']
        userOrg = user
        vcsUrl = projectGitUrl
        websiteUrl = projectSiteUrl
        issueTrackerUrl = projectIssueUrl
        publish = true
        publicDownloadNumbers = true
        // Optional package-level attributes
        attributes = ['Developer': developerName,
                      'Site'     : developerSite,
                      'Support'  : developerEmail]
        version {
            name = projectVersion
            desc = projectDesc
            vcsTag = projectVersion
            attributes = ['Version': "${project.version}"]
        }
    }
}

tasks.withType(Javadoc).all {
    enabled = false
    options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// JFrog SNAPSHOT.
apply plugin: "com.jfrog.artifactory"

artifactory {
    contextUrl = 'http://oss.jfrog.org/artifactory'
    resolve {
        repository {
            repoKey = 'libs-release'
        }
    }
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = bintray.user
            password = bintray.key
            maven = true
        }
        defaults {
            publishConfigs('archives')
        }
    }
}
