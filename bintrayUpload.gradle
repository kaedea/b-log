apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

// Load properties.
Properties properties = new Properties()

File projectPropertiesFile = project.file("project.properties");
if(projectPropertiesFile.exists()){
    properties.load(projectPropertiesFile.newDataInputStream())
}
File localPropertiesFile = rootProject.file("local.properties");
if(localPropertiesFile.exists()){
    properties.load(localPropertiesFile.newDataInputStream())
}

def bintrayRepo = properties.getProperty("bintary.repo")
def projectGroupId = properties.getProperty("project.groupId")
def projectVersionName = properties.getProperty("project.version")
def projectSiteUrl = properties.getProperty("project.siteUrl")
def projectGitUrl = properties.getProperty("project.gitUrl")
def projectIssueUrl = properties.getProperty("project.issueUrl")
def projectDesc = properties.getProperty("project.description")

def developerName = properties.getProperty("developer.name")
def developerEmail = properties.getProperty("developer.email")
// def javadocName = properties.getProperty("javadoc.name")

def bintrayUser = properties.getProperty("bintray.user")
def bintrayApiKey = properties.getProperty("bintray.apikey")

group = projectGroupId
version = projectVersionName

def hasAndroidPlugin() {
    return getPlugins().inject(false) { a, b->
        def classStr = b.getClass().name
        def isAndroid = ("com.android.build.gradle.LibraryPlugin" == classStr) || ("com.android.build.gradle.AppPlugin" == classStr)
        a || isAndroid
    }
}
task sourcesJar(type: Jar) {
    if (hasAndroidPlugin()) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    } else {
        from sourceSets.main.allSource
        classifier = 'sources'
    }
}
artifacts {
    archives sourcesJar
    // archives javadocJar
}

bintray {
    user = bintrayUser?.trim() ? bintrayUser : System.getenv('BT_USER')
    key = bintrayApiKey?.trim() ? bintrayApiKey : System.getenv('BT_KEY')
    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = "${project.name}"
        desc = projectDesc
        licenses = ['Apache-2.0']
        userOrg = user
        vcsUrl = projectGitUrl
        websiteUrl = projectSiteUrl
        issueTrackerUrl = projectIssueUrl
        publish = true
        publicDownloadNumbers = true
        // Optional package-level attributes
        attributes = ['Developer': developerName,
                      'Site'     : 'www.kaedea.com',
                      'Support'  : developerEmail]
        version {
            name = projectVersionName
            desc = projectDesc
            vcsTag = projectVersionName
            attributes = ['Version': "${project.version}"]
        }
    }
}

tasks.withType(Javadoc).all {
    enabled = false
    options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}