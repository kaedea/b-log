/*
 * Copyright (c) 2016. Kaede (kidhaibara@gmail.com)
 */

apply plugin: 'com.android.library'

version = "0.3.0"

android {
    compileSdkVersion rootProject.ext.targetSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    resourcePrefix "blog_"

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName version
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'

    // compile 'com.android.support:appcompat-v7:24.1.1'
    compile "com.android.support:support-v4:${rootProject.ext.androidSupportLibraryVersion}"
    compile 'commons-io:commons-io:2.5'
    compile 'moe.kaede:dispatcher:0.1.0'

}

// http://stackoverflow.com/questions/16763090/how-to-export-library-to-jar-in-android-studio
// makeJar 1
// This is the actual solution, as in http://stackoverflow.com/a/19037807/1002054
/*
task clearJar(type: Delete) {
    delete 'build/libs/myCompiledLibrary.jar'
}

task makeJar(type: Copy) {
    from('build/bundles/release/')
    into('build/libs/')
    include('classes.jar')
    rename ('classes.jar', 'myCompiledLibrary.jar')
}

makeJar.dependsOn(clearJar, build)
*/

// // makeJar 2
android.libraryVariants.all { variant ->
    task("generate${variant.name}Javadoc", type: Javadoc) {
        group = "publishing"
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
    }

    task("javadoc${variant.name}", type: Jar) {
        group = "publishing"
        classifier = "javadoc"
        description "Bundles Javadoc into a JAR file for $variant.name."
        from tasks["generate${variant.name}Javadoc"]

    }

    task("jar${variant.name}", type: Jar) {
        group = "publishing"
        description "Bundles compiled .class files into a JAR file for $variant.name."
        dependsOn variant.javaCompile
        from variant.javaCompile.destinationDir
        exclude '**/R.class', '**/R$*.class', '**/R.html', '**/R.*.html'
    }
}

apply from: "bintrayUpload.gradle"
